import express from "express";
import mongoose from "mongoose";
import multer from "multer";
import { GridFsStorage } from "multer-gridfs-storage";
import { GridFSBucket } from "mongodb";
import UG1Form from "../models/UG1Form.js";
import crypto from "crypto";
import path from "path";

const router = express.Router();
const conn = mongoose.connection;
let gfs;
conn.once("open", () => {
  gfs = new GridFSBucket(conn.db, { bucketName: "uploads" });
  console.log("‚úÖ GridFS connected successfully");
});

// ‚úÖ GridFS Storage Setup
let storage;
conn.once("open", () => {
  gfs = new GridFSBucket(conn.db, { bucketName: "uploads" });

  storage = new GridFsStorage({
    db: conn.db,  // ‚úÖ Use the connected database
    file: (req, file) => ({
      filename: `${Date.now()}-${file.originalname}`,
      bucketName: "uploads",
    }),
  });
  console.log("‚úÖ GridFS and Storage initialized successfully");
});

const upload = multer({ storage });

// ‚úÖ **Submit Form Data**
router.post("/saveFormData", async (req, res) => {
  try {
    console.log("üì© **Form Submission Received**:", JSON.stringify(req.body, null, 2));

    const newForm = new UG1Form(req.body);
    const savedForm = await newForm.save();

    console.log("‚úÖ Form saved successfully with ID:", savedForm._id);
    res.status(201).json({ message: "Form data saved successfully", formId: savedForm._id });
  } catch (error) {
    console.error("‚ùå Error saving form data:", error);
    res.status(500).json({ error: "Server error" });
  }
});

router.post("/uploadPDF/:formId", upload.single("pdfFile"), async (req, res) => {
  try {
    const { formId } = req.params;
    console.log("üü¢ Form ID:", formId);
    console.log("üìÇ File received:", req.file);

    if (!req.file) {
      console.log("‚ùå No file uploaded!");
      return res.status(400).json({ message: "No file uploaded" });
    }

    // The file ID is generated by GridFS and is part of the uploaded file object (req.file.id)
    const fileId = req.file.id;
    console.log("üÜî File ID:", fileId);

    // Link the file ID to the form in the database
    const updatedForm = await UG1Form.findByIdAndUpdate(
      formId,
      { pdfFileId: fileId },
      { new: true }
    );

    if (!updatedForm) {
      console.log("‚ùå Form not found!");
      return res.status(404).json({ message: "Form not found" });
    }

    console.log("‚úÖ PDF linked successfully:", updatedForm);
    res.status(200).json({ message: "PDF uploaded successfully!", form: updatedForm });

  } catch (error) {
    console.error("‚ùå Upload error:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
});

// ‚úÖ **Fetch Form Data for a User**
router.get("/user/:svvNetId", async (req, res) => {
  try {
    const { svvNetId } = req.params;
    const forms = await UG1Form.find({ svvNetId });

    if (!forms.length) {
      return res.status(404).json({ message: "No forms found for this user." });
    }

    res.json(forms);
  } catch (error) {
    console.error("‚ùå Error fetching user forms:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

export default router;
