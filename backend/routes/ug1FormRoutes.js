import express from "express";
import mongoose from "mongoose";
import multer from "multer";
import { GridFsStorage } from "multer-gridfs-storage";
import { GridFSBucket } from "mongodb";
import UG1Form from "../models/UG1Form.js";

const router = express.Router();
const conn = mongoose.connection;
let gfs;
conn.once("open", () => {
  gfs = new GridFSBucket(conn.db, { bucketName: "uploads" });
});

// ✅ GridFS Storage Setup
let storage;
conn.once("open", () => {
  storage = new GridFsStorage({
    db: conn.db,  // ✅ Use the connected database
    file: (req, file) => ({
      filename: `${Date.now()}-${file.originalname}`,
      bucketName: "uploads",
    }),
  });
  console.log("✅ GridFS and Storage initialized successfully");
});

const upload = multer({ storage });

// ✅ **Submit Form Data**
router.post("/saveFormData", async (req, res) => {
  try {
    const newForm = new UG1Form(req.body);
    const savedForm = await newForm.save();
    res.status(201).json({ message: "Form data saved successfully", formId: savedForm._id });
  } catch (error) {
    console.error("❌ Error saving form data:", error);
    res.status(500).json({ error: "Server error" });
  }
});

router.post("/uploadPDF/:formId", upload.single("pdfFile"), async (req, res) => {
  try {
    const { formId } = req.params;
    if (!req.file) {
      console.log("❌ No file uploaded!");
      return res.status(400).json({ message: "No file uploaded" });
    }
    // The file ID is generated by GridFS and is part of the uploaded file object (req.file.id)
    const fileId = req.file.id;

    // Link the file ID to the form in the database
    const updatedForm = await UG1Form.findByIdAndUpdate(
      formId,
      { pdfFileId: fileId },
      { new: true }
    );

    if (!updatedForm) {
      console.log("❌ Form not found!");
      return res.status(404).json({ message: "Form not found" });
    }

    console.log("✅ PDF linked successfully:", updatedForm);
    res.status(200).json({ message: "PDF uploaded successfully!", form: updatedForm });

  } catch (error) {
    console.error("❌ Upload error:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
});

router.post("/uploadSignature/:formId/:type", upload.single("file"), async (req, res) => {
  try {
    const { formId, type } = req.params;
    if (!req.file) return res.status(400).json({ message: "No file uploaded" });

    const fileId = req.file.id;

    const updateField =
      type === "groupLeader" ? { groupLeaderSignatureId: fileId } :
      type === "guide" ? { guideSignatureId: fileId } :
      null;

    if (!updateField) return res.status(400).json({ message: "Invalid signature type" });

    const updatedForm = await UG1Form.findByIdAndUpdate(formId, updateField, { new: true });

    if (!updatedForm) return res.status(404).json({ message: "Form not found" });

    res.status(200).json({ message: `${type} signature uploaded`, form: updatedForm });

  } catch (error) {
    console.error("❌ Signature Upload Error:", error);
    res.status(500).json({ message: "Internal server error", error: error.message });
  }
});

// ✅ **Fetch Form Data for a User**
router.get("/user/:svvNetId", async (req, res) => {
  try {
    const { svvNetId } = req.params;
    const forms = await UG1Form.find({ svvNetId });

    if (!forms.length) {
      return res.status(404).json({ message: "No forms found for this user." });
    }

    res.json(forms);
  } catch (error) {
    console.error("❌ Error fetching user forms:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

export default router;
